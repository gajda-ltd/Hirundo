*The new features of Bootstrap 4:*
- Bootstrap 4 is written using Flexbox Grid, whereas Bootstrap 3 was written using the float method.
- Bootstrap 4 uses rem CSS units whereas Bootstrap 3 uses px.

*The Bootstrap Grid system:*
The new Bootstrap Grid is built with the Flexbox system, so for alignment, you have to use a Flexbox property.

Revamped grid tiers to add a fifth option (addressing smaller devices at 576px and below) and removed the -xs infix from those classes.

**Updated grid class names and a new grid tier.**
Added a new sm grid tier below 768px for more granular control. We now have xs, sm, md, lg, and xl. 
This also means every tier has been bumped up one level (so .col-md-6 in v3 is now .col-lg-6 in v4).

xs grid classes have been modified to not require the infix to more accurately represent that they start applying styles 
at min-width: 0 and not a set pixel value. Instead of .col-xs-6, it’s now .col-6. All other grid tiers require the infix (e.g., sm).

**Container**
***Our default .container class is a responsive, fixed-width container, meaning its max-width changes at each breakpoint.***
***Use .container-fluid for a full width container, spanning the entire width of the viewport.***
***Responsive containers are new in Bootstrap v4.4. 
They allow you to specify a class that is 100% wide until the specified breakpoint is reached, 
after which we apply max-widths for each of the higher breakpoints.

**Responsive breakpoints**
- all breakpoints: extra small (prefix: '.col-'), small ('.col-sm-'), medium ('.col-md-'), large ('.col-lg-'), 
and extra large ('.col-xl-')
***based on minimum viewport widths and allow us to scale up elements as the viewport changes, np. media-breakpoint-up(sm) { ... }***
***the given screen size or smaller, np. @include media-breakpoint-down(sm) { ... }***
***targeting a single segment of screen sizes, np. @include media-breakpoint-only(sm) { ... }***
***media queries may span multiple breakpoint widths, np. @include media-breakpoint-between(md, xl) { ... }***

https://getbootstrap.com/docs/4.5/layout/grid/
https://coursetro.com/posts/code/130/Learn-Bootstrap-4-Final-in-2018-with-our-Free-Crash-Course

*Grid system*
While Bootstrap uses ems or rems for defining most sizes, pxs are used for grid breakpoints and container widths. 
This is because the viewport width is in pixels and does not change with the font size.

- In a grid layout, content must be placed within columns and only columns may be immediate children of rows.
- Thanks to flexbox, grid columns without a specified width will automatically layout as equal width columns 
(tylko klasy '.col', bez 'xs', 'sm-3' etc.);
See the auto-layout columns section for more examples: https://getbootstrap.com/docs/4.5/layout/grid/#auto-layout-columns
- Column classes indicate the number of columns you’d like to use out of the possible 12 per row. 
So, if you want three equal-width columns across, you can use .col-4.
- Column widths are set in percentages, so they’re always fluid and sized relative to their parent element.
- Columns have horizontal padding to create the gutters between individual columns, however, 
you can remove the margin from rows and padding from columns with .no-gutters on the .row.,
- Grid breakpoints are based on minimum width media queries, meaning they apply to that one breakpoint and all those above it 
(e.g., .col-sm-4 applies to small, medium, large, and extra large devices, but not the first xs breakpoint).

*Auto-layout columns*
**niektóre opcje**
- Setting one column width -> sibling columns automatically resize around it
- Variable width content -> Use col-{breakpoint}-auto classes to size columns based on the natural width of their content
- Row columns -> to quickly set the number of columns that best render your content and layout: 
whereas normal .col-* classes apply to the individual columns (e.g., .col-md-4), 
the row columns classes are set on the parent .row as a shortcut, 
np. <div class="row row-cols-4">, to .row-cols-md-4>* { max-width: 25% }

**Custom gutters**
Gutters can be responsively adjusted by breakpoint-specific padding and negative margin utility classes:
- see margin and padding 'Utilities for layout': https://getbootstrap.com/docs/4.0/utilities/spacing/

**No gutters**
The gutters between columns in our predefined grid classes can be removed with .no-gutters. 
This removes the negative margins from .row and the horizontal padding from all immediate children columns.
Need an edge-to-edge design? Drop the parent .container or .container-fluid!

**Alignment**
Use flexbox alignment utilities to vertically and horizontally align columns.
***Vertical alignment***
- all elements in the row: <div class="row align-items-start / center / end">
- single elements in the row: <div class="col align-self-start / center / end">

***Horizontal alignment***
- <div class="row justify-content-start / cetner / end / around / between">

***Column breaks***
Breaking columns to a new line in flexbox requires a small hack: add an element with width: 
100% wherever you want to wrap your columns to a new line.

You may also apply this break at specific breakpoints with our responsive display utilities, 
np. <div class="w-100 d-none d-md-block"></div>

**Reordering**
***Order classes***
Use .order- classes for controlling the visual order of your content. 
These classes are responsive, so you can set the order by breakpoint (e.g., .order-1.order-md-2).

There are also responsive .order-first and .order-last classes that change the order of an element by applying order: 
-1 and order: 13 (order: $columns + 1), respectively. 
These classes can also be intermixed with the numbered .order-* classes as needed.

**Offsetting columns**
You can offset grid columns in two ways: our responsive .offset- grid classes and our margin utilities. 
Grid classes are sized to match columns while margins are more useful for quick layouts where the width of the offset is variable.

***Offset classes***
Move columns to the right using .offset-md-* classes. These classes increase the left margin of a column by * columns.
In addition to column clearing at responsive breakpoints, you may need to reset offsets,
np. <div class="col-sm-5 offset-sm-2 col-md-6 offset-md-0">

***Margin utilities***
With the move to flexbox in v4, you can use margin utilities like .mr-auto to force sibling columns away from one another, np.
- <div class="col-md-4 ml-auto">.col-md-4 .ml-auto</div> -> margin-left: auto
- <div class="col-md-3 ml-md-auto">.col-md-3 .ml-md-auto</div> -> margin-left md-breakpoint na auto

**Nesting**
To nest your content with the default grid, add a new .row and set of .col-sm-* columns within an existing .col-sm-* column. 
Nested rows should include a set of columns that add up to 12 or fewer.

**Sass mixins**
When using Bootstrap’s source Sass files, you have the option of using Sass variables and mixins to create custom, 
semantic, and responsive page layouts.

***Variables***
Variables and maps determine the number of columns, the gutter width, and the media query point
***Mixins***
Mixins are used in conjunction with the grid variables to generate semantic CSS for individual grid columns.
***Customizing the grid***
Using our built-in grid Sass variables and maps, it’s possible to completely customize the predefined grid classes. 
Change the number of tiers, the media query dimensions, and the container widths—then recompile.
When making any changes to the Sass variables or maps, you’ll need to save your changes and recompile.

**Utilities for layout**
***Changing display***
- to show or hide elements across specific viewports
***Flexbox options***
- Bootstrap 4 is built with flexbox, but not every element’s display has been changed to display: flex.
- Should you need to add display: flex to an element, do so with .d-flex or one of the responsive variants (e.g., .d-sm-flex). 
You’ll need this class or display value to allow the use of our extra flexbox utilities for sizing, alignment, spacing, and more.
***Margin and padding***
Use the margin and padding spacing utilities to control how elements and components are spaced and sized. 
Bootstrap 4 includes a five-level scale for spacing utilities, based on a 1rem value default $spacer variable.
***Toggle visibility***
When toggling display isn’t needed, you can toggle the visibility of an element with our visibility utilities.


